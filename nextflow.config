params {
    skip       = ''
    run        = null
    outdir     = null
    remoteFile = null
}

process {
    container     = "docker.io/library/ubuntu:23.10"
    errorStrategy = "finish"
    when          = { 
        ( params.run ? params.run.split(',').any{ "NF_CANARY:${it.toUpperCase()}".contains(task.process) } : true ) && 
        (!params.skip.split(',').any{ "NF_CANARY:${it.toUpperCase()}".contains(task.process) } ) 
    }
}

//These memory values correspond to memory optimized instances
//This also allows for an initial attempt with spot and then to fallback to on-demand
def determine_queue() {
    return 'tower-pool-5nixeuscB9FNVzGl2CFefR'
}

process {
  withName: '.*' {
      queue = { determine_queue() }
  }
}
